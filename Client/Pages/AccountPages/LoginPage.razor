@page "/identity/account/login"

@layout AuthenticationLayout

<div class="container">
    <div class="row">
        <div class="col-lg-4"></div>
        <div class="col-lg-4">
            <EditForm Model="@User" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />

                <div class="card bg-dark" style="opacity:0.5; margin-top:50%; border-radius:10px; color:white; font-weight:bold">
                    <div class="card-header text-center fs-5 mb-2">Login</div>
                    <div class="container">
                        <div class="row">
                            <div class="col-lg-4 col-md-4 col-sm-4"></div>
                            <div class="col-lg-4 col-md-4 col-sm-4 d-flex justify-content-center">
                                <img style="border-radius:20px" src="../images/companylogos/nmcode.jpg" height="50" width="50" />
                        </div>
                            <div class="col-lg-4 col-md-4 col-sm-4"></div>

                        </div>
                    </div>
                    <div class="card-body">
                        <div class="form-group mt-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="User.Email" class="form-control" />
                        </div>

                        <div class="form-group mt-3">
                            <label class="form-label">Password</label>
                            <InputText @bind-Value="User.Password" type="password" class="form-control" />
                        </div>

                        <div class="form-group mt-3">
                            @if (ShowLoadingButton)
                            {
                                <ButtonLoadingSpinner></ButtonLoadingSpinner>
                            }
                            else
                            {
                                <button class="btn btn-primary float-end" type="submit">Login</button>
                            }
                        </div>
                    </div>
                    <div class="card-footer">
                        <span class="text-center">
                            Don't have an account? 
                            <a href="identity/account/register" class="btn-link">Sign Up</a>
                        </span>
                        <ValidationSummary></ValidationSummary>
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="col-lg-4"></div>
    </div>
</div>

@code {
    public bool ShowLoadingButton { get; set; } = false;
    Login User = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CheckUserAuthentication();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Authentication check error: {ex.Message}");
        }
    }

    async Task HandleLogin()
    {
        try
        {
            ShowLoadingButton = true;
            var result = await accountService.SignInAsync(User);

            if (result?.Flag == true)
            {
                await DisplayDialog(result.Message ?? "Login successful", "Success");
                var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
                await customAuthStateProvider.UpdateAuthenticationState(new UserSession()
                {
                    Token = result.Token ?? string.Empty,
                    RefreshToken = result.RefreshToken ?? string.Empty
                });
                NavManager.NavigateTo("/", forceLoad: true);
            }
            else
            {
                await DisplayDialog(result?.Message ?? "Login failed", "Alert!");
            }
        }
        catch (Exception ex)
        {
            await DisplayDialog("An error occurred during login", "Error");
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            ShowLoadingButton = false;
        }
    }

    private async Task DisplayDialog(string content, string title)
    {
        if (dialogService != null)
        {
            await dialogService.AlertAsync(content, title);
        }
    }

    private async Task CheckUserAuthentication()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (authState?.User?.Identity?.IsAuthenticated == true)
            {
                NavManager.NavigateTo("/home/dashboard");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Authentication check error: {ex.Message}");
        }
    }
}