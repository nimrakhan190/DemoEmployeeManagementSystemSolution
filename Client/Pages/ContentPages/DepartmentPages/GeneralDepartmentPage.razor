@implements IDisposable

@if (allState.ShowGeneralDepartment)
{
	<div class="container mt-5">
		<div class="row">
			<div class="col-lg-12">
				<div class="card">
					<div class="card-header">
						<h4 class="float-start">General Department</h4>
						<button class="btn btn-outline-success float-end" @onclick="() => OpenDialog()">
							<i class="bi bi-plus-circle-dotted"></i> Add Department
						</button>
					</div>
					<div class="card-body">
						<!-- FIXED: Moved table here -->
						<table class="table table-striped">
							<thead>
								<tr>
									<th scope="col">#</th>
									<th scope="col">Id</th>
									<th scope="col">General department</th>
									<th scope="col">Action</th>
								</tr>
							</thead>
							<tbody>
								@if (GeneralDepartments is not null && GeneralDepartments.Count > 0)
								{
									int count = 1;
									foreach (var item in GeneralDepartments)
									{
										<tr>
											<th scope="row">@count</th>
											<td>@item.Id</td>
											<td>@item.Name</td>
											<td>
												<i class="bi bi-pencil text-info cursorStyle"
												   @onclick="() => EditClicked(item)"></i>
												<i class="bi bi-trash text-danger cursorStyle"
												   @onclick="() => DeleteClicked(item)"></i>
											</td>
										</tr>
										count++;
									}
								}
								else
								{
									<tr>
										<td colspan="4">
											<div class="alert alert-info text-center">
												No General Department added yet!
											</div>
										</td>
									</tr>
								}
							</tbody>
						</table>
					</div> <!-- End card-body -->
				</div> <!-- End card -->
			</div>
		</div>
	</div>
}

<GeneralDepartmentDialog @ref="generalDepartmentDialog"
						 HandleSaveOperationEvent="HandleSaveOperationEvent"
						 GeneralDepartment="GeneralDepartment" />

<style>
	.cursorStyle {
		cursor: pointer;
	}
</style>

@code {
	GeneralDepartmentDialog? generalDepartmentDialog;
	GeneralDepartment GeneralDepartment = new();
	public string Title { get; set; } = "Add";
	public List<GeneralDepartment> GeneralDepartments { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		await GetGeneralDepartments();
		allState.Action += StateHasChanged;
	}

	private async Task GetGeneralDepartments()
	{
		GeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
	}

	private async Task OpenDialog()
	{
		 generalDepartmentDialog?.OpenDialog();
	}

	private async Task HandleSaveOperationEvent(GeneralDepartment generalDepartment)
	{
		bool successCheck = false;

		if (GeneralDepartment.Id > 0)
		{
			var result = await generalDepartmentService.Update(GeneralDepartment, Constants.GeneralDepartmentBaseUrl);
			successCheck = await DisplayMessage(result.Flag, result.Message);
		}
		else
		{
			var response = await generalDepartmentService.Insert(GeneralDepartment, Constants.GeneralDepartmentBaseUrl);
			successCheck = await DisplayMessage(response.Flag, response.Message);
		}

		if (successCheck)
		{
			GeneralDepartment = new();
			await GetGeneralDepartments();
			generalDepartmentDialog?.ChangeTitle("Add");
		}
	}

	private async void EditClicked(GeneralDepartment dep)
	{
		generalDepartmentDialog?.ChangeTitle("Update");
		GeneralDepartment = dep;
		await OpenDialog();
	}

	private async Task DeleteClicked(GeneralDepartment dep)
	{
		bool confirm = await dialogService.ConfirmAsync($"Are you sure you want to delete {dep.Name}?", "Confirm Delete");
		if (!confirm) return;

		var response = await generalDepartmentService.DeleteById(dep.Id, Constants.GeneralDepartmentBaseUrl);
		if (await DisplayMessage(response.Flag, response.Message))
			await GetGeneralDepartments();
	}

	private async Task<bool> DisplayMessage(bool flag, string message)
	{
		if (flag)
		{
			await dialogService.AlertAsync(message, "Success Operation");
			return true;
		}
		else
		{
			await dialogService.AlertAsync(message, "Alert!");
			return false;
		}
	}

	public void Dispose()
	{
		allState.Action -= StateHasChanged;
	}
}
