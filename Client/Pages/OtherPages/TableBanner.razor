<div class="container-fluid">
    <div class="row g-3">
        <!-- Added g-3 for gaps between cards -->
        <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6 col-12 cursorStyle">
            <!-- Made responsive -->
            <div class="card border-primary" @onclick="EmployeeClicked">
                <div class="card-header">
                    <i class="bi bi-people text-primary me-2"></i>Employees
                    <span class="badge bg-primary fs-6"> @Employees.Count</span>
                </div>
            </div>
        </div>
        <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6 col-12 cursorStyle">
            <div class="card border-success" @onclick="VacationClicked">
                <div class="card-header">
                    <i class="bi bi-backpack3 text-success me-2"></i>Vacation
                    <span class="badge bg-success fs-6"> @Vacations.Count</span>
                </div>
            </div>
        </div>
        <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6 col-12 cursorStyle">
            <div class="card border-danger" @onclick="OvertimeClicked">
                <div class="card-header">
                    <i class="bi bi-stopwatch text-danger me-2"></i>Overtime
                    <span class="badge bg-danger fs-6"> @Overtimes.Count</span>
                </div>
            </div>
        </div>
        <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6 col-12 cursorStyle">
            <div class="card border-warning" @onclick="HealthClicked">
                <div class="card-header">
                    <i class="bi bi-hospital text-warning me-2"></i>Health
                    <span class="badge bg-warning fs-6"> @Health.Count</span>
                </div>
            </div>
        </div>
        <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6 col-12 cursorStyle">
            <div class="card border-info" @onclick="SanctionClicked">
                <div class="card-header">
                    <i class="bi bi-x-octagon text-info me-2"></i>Sanctions
                    <span class="badge bg-info fs-6"> @Sanctions.Count</span>
                </div>
            </div>
        </div>
        <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6 col-12 cursorStyle">
            <div class="card border-dark" @onclick="DepartmentClicked">
                <div class="card-header">
                    <i class="bi bi-slack text-dark me-2"></i>Departments
                    <span class="badge bg-dark fs-6"> @Departments.Count</span>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .cursorStyle {
        cursor: pointer;
    }

    /* Additional spacing for cards if needed */
    .card {
        transition: transform 0.2s;
    }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
</style>

@code {
    public List<Employee> Employees { get; set; } = new();
    public List<Department> Departments { get; set; } = new();
    public List<Overtime> Overtimes { get; set; } = new();
    public List<Sanction> Sanctions { get; set; } = new();
    public List<Vacation> Vacations { get; set; } = new();
    public List<Doctor> Health { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        allState.Action += StateHasChanged;
        await LoadDefaults();
    }

    async Task LoadDefaults()
    {
        Employees = await employeeService.GetAll(Constants.EmployeeBaseUrl);
        Departments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
        Overtimes = await overtimeService.GetAll(Constants.OvertimeBaseUrl);
        Sanctions = await sanctionService.GetAll(Constants.SanctionBaseUrl);
        Vacations = await vacationService.GetAll(Constants.VacationBaseUrl);
        Health = await doctorService.GetAll(Constants.DoctorBaseUrl);
    }

    void HealthClicked() => allState.HealthClicked();
    void OvertimeClicked() => allState.OvertimeClicked();
    void SanctionClicked() => allState.SanctionClicked();
    void VacationClicked() => allState.VacationClicked();
    void EmployeeClicked() => allState.EmployeeClicked();

    void DepartmentClicked()
    {
        allState.DepartmentClicked();
        StateHasChanged(); // Add this line to force UI update
    }
    public void Dispose() => allState.Action -= StateHasChanged;
}